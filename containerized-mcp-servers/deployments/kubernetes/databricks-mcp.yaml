apiVersion: v1
kind: Secret
metadata:
  name: databricks-mcp-secret
  namespace: default
type: Opaque
stringData:
  access-token: "your-databricks-access-token"

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: databricks-mcp-config
  namespace: default
data:
  config.yaml: |
    databricks:
      server_hostname: "your-workspace.databricks.com"
      http_path: "/sql/1.0/warehouses/your-warehouse-id"
      catalog: "your-catalog"
      schema: "your-schema"
      timeout: 120
      max_retries: 3
      retry_delay: 5

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: databricks-mcp
  namespace: default
  labels:
    app: databricks-mcp
    version: v1.0.0
spec:
  replicas: 1
  selector:
    matchLabels:
      app: databricks-mcp
  template:
    metadata:
      labels:
        app: databricks-mcp
        version: v1.0.0
    spec:
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        fsGroup: 1000
      containers:
      - name: databricks-mcp
        image: ghcr.io/your-org/databricks-mcp:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 8080
          name: health
        env:
        - name: DATABRICKS_SERVER_HOSTNAME
          valueFrom:
            configMapKeyRef:
              name: databricks-mcp-config
              key: server_hostname
        - name: DATABRICKS_HTTP_PATH
          valueFrom:
            configMapKeyRef:
              name: databricks-mcp-config
              key: http_path
        - name: DATABRICKS_ACCESS_TOKEN
          valueFrom:
            secretKeyRef:
              name: databricks-mcp-secret
              key: access-token
        - name: DATABRICKS_CATALOG
          valueFrom:
            configMapKeyRef:
              name: databricks-mcp-config
              key: catalog
              optional: true
        - name: DATABRICKS_SCHEMA
          valueFrom:
            configMapKeyRef:
              name: databricks-mcp-config
              key: schema
              optional: true
        volumeMounts:
        - name: config
          mountPath: /app/config
          readOnly: true
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        livenessProbe:
          exec:
            command:
            - python
            - -c
            - "import health_check; health_check.check_health()"
          initialDelaySeconds: 30
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        readinessProbe:
          exec:
            command:
            - python
            - -c
            - "import health_check; health_check.check_ready()"
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
      volumes:
      - name: config
        configMap:
          name: databricks-mcp-config
      restartPolicy: Always

---
apiVersion: v1
kind: Service
metadata:
  name: databricks-mcp-service
  namespace: default
  labels:
    app: databricks-mcp
spec:
  selector:
    app: databricks-mcp
  ports:
  - name: health
    port: 8080
    targetPort: 8080
    protocol: TCP
  type: ClusterIP

---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: databricks-mcp-netpol
  namespace: default
spec:
  podSelector:
    matchLabels:
      app: databricks-mcp
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - podSelector:
        matchLabels:
          app: mcp-client
    ports:
    - protocol: TCP
      port: 8080
  egress:
  - to: []
    ports:
    - protocol: TCP
      port: 443  # HTTPS for Databricks
    - protocol: TCP
      port: 53   # DNS
    - protocol: UDP
      port: 53   # DNS