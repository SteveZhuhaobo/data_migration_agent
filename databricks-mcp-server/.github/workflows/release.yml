name: Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write
  id-token: write

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"
    
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
    
    - name: Extract version from tag
      id: version
      run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
    
    - name: Update version in pyproject.toml
      run: |
        sed -i 's/version = ".*"/version = "${{ steps.version.outputs.VERSION }}"/' pyproject.toml
    
    - name: Build package
      run: python -m build
    
    - name: Check package
      run: twine check dist/*
    
    - name: Validate distribution
      run: python scripts/validate_distribution.py --skip-uvx
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: dist
        path: dist/

  test-release:
    needs: build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.10", "3.12"]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install uv
      uses: astral-sh/setup-uv@v2
      with:
        version: "latest"
    
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: dist
        path: dist/
    
    - name: Test package installation and basic functionality
      run: |
        uv venv test-env
        source test-env/bin/activate || test-env\Scripts\activate
        pip install dist/*.whl
        databricks-mcp-server --help
        python -c "import databricks_mcp_server; print('Package imported successfully')"
    
    - name: Test uvx installation
      run: |
        uvx --from dist/*.whl databricks-mcp-server --help

  publish-testpypi:
    needs: test-release
    runs-on: ubuntu-latest
    environment: testpypi
    
    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: dist
        path: dist/
    
    - name: Publish to TestPyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        repository-url: https://test.pypi.org/legacy/
        password: ${{ secrets.TEST_PYPI_API_TOKEN }}
        skip-existing: true

  test-testpypi:
    needs: publish-testpypi
    runs-on: ubuntu-latest
    
    steps:
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"
    
    - name: Install uv
      uses: astral-sh/setup-uv@v2
      with:
        version: "latest"
    
    - name: Extract version from tag
      id: version
      run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
    
    - name: Wait for TestPyPI propagation
      run: sleep 60
    
    - name: Test installation from TestPyPI
      run: |
        uv venv test-env
        source test-env/bin/activate
        pip install --index-url https://test.pypi.org/simple/ --extra-index-url https://pypi.org/simple/ databricks-mcp-server==${{ steps.version.outputs.VERSION }}
        databricks-mcp-server --help
    
    - name: Test uvx installation from TestPyPI
      run: |
        uvx --index-url https://test.pypi.org/simple/ --extra-index-url https://pypi.org/simple/ databricks-mcp-server==${{ steps.version.outputs.VERSION }} --help

  publish-pypi:
    needs: test-testpypi
    runs-on: ubuntu-latest
    environment: pypi
    
    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: dist
        path: dist/
    
    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        password: ${{ secrets.PYPI_API_TOKEN }}
        skip-existing: true

  create-release:
    needs: publish-pypi
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: dist
        path: dist/
    
    - name: Generate changelog
      id: changelog
      run: |
        # Get the previous tag
        PREV_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")
        
        # Generate changelog
        if [ -n "$PREV_TAG" ]; then
          echo "CHANGELOG<<EOF" >> $GITHUB_OUTPUT
          echo "## Changes since $PREV_TAG" >> $GITHUB_OUTPUT
          git log --pretty=format:"- %s (%h)" $PREV_TAG..HEAD >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
        else
          echo "CHANGELOG=Initial release" >> $GITHUB_OUTPUT
        fi
    
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        files: dist/*
        body: |
          # Databricks MCP Server ${{ github.ref_name }}
          
          ## Installation
          
          Install using uvx (recommended):
          ```bash
          uvx databricks-mcp-server
          ```
          
          Or install using pip:
          ```bash
          pip install databricks-mcp-server
          ```
          
          ${{ steps.changelog.outputs.CHANGELOG }}
          
          ## Verification
          
          After installation, verify it works:
          ```bash
          databricks-mcp-server --help
          ```
        draft: false
        prerelease: false